[OldDB]
# Connection settings for the old SQL Server database
host=127.0.0.1
port=1433
name=OpenIMIS
user=imisUser
pwd=100%SecurePassword

[NewDB]
# Connection settings for the new PostgreSQL database
host=127.0.0.1
port=5432
name=openimis
user=postgres
pwd=MoreThan100%SecurePassword

[Other]
# delete_data: When this is True, each table in the new database will be emptied (delete all data in the table) before
# data is migrated over. This is destructive, but can solve conflicts where unique identifiers and primary keys from the
# old database conflict with data present in the new database
delete_data=True
# historical: When this is True, all data will be migrated to the new database. When set to False, no historical data
# will be migrated. Data is considered historical when its "ValidityTo" (or similar) field is set in the past. This can
# help keep the new database lean If the old data really is no longer required.
historical=True
# demo_fix: This fixes an issue with the demo database where foreign keys reference a FeedbackID in the table
# tblFeedback that does not exist. The fix just manually adds an entry with the correct FeedbackID.
demo_fix=True
# module migrations to transfer
# Many newer modules are created solely from Django migrations. If we created a module called "foo", this script
# will not create the Postgres table and won't copy the table over from SQL Server. But the django_migrations table
# will be transferred with the foobar module marked as created, so Django won't even attempt to create these tables.
# So this parameter defines the modules for which we have tables here and we will ignore the rest in the migrations.
migration_modules=core,location,medical,medical_pricelist,product,insuree,policy,contribution,payer,payment,claim,claim_batch,tools,api_fhir_r4